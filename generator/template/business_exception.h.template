/****************************************************
 *
 * ****     ***     ****    *   *    *****    *****
 * *  *    *   *   *        ****     ***        *
 * *   *    ***     ****    *   *    *****      *
 *
 * ${FILE_NAME}
 * ${CREATE_TIME}
 * Generated by rocket framework rocket_generator.py
 * Do not edit !!!
****************************************************/


#ifndef ${HEADER_DEFINE}
#define ${HEADER_DEFINE} 




#include <string>
#include <memory>
#include <sstream>
#include <rocket/common/exception.h>
#include <rocket/common/log.h>


namespace ${PROJECT_NAME} {

class BusinessException : public rocket::RocketException {
 public:

  BusinessException(long long code, const std::string& err_info, const std::string& file_name, int line):
      m_error_code(code), m_error_info(err_info), m_file_name(file_name), m_line(line) {

    APPINFOLOG("[%s:%lld] throw BusinessException[code: %d, error info: %s]", file_name.c_str(), line, code, err_info.c_str());
  }

  ~BusinessException() {
  
  }

  void handle() override {
    rocket::RpcInterface* interface = rocket::RunTime::GetRunTime()->m_rpc_interface;
    if (interface != NULL) {
      interface->setError(m_error_code, m_error_info);
    }

  }

  const char* what() {
    return m_error_info.c_str();
  }

  std::string error() {
    return m_error_info;
  }

  long long code() {
    return m_error_code;
  }

  std::string file_name() {
    return m_file_name;
  }

  int line() {
    return m_line;
  }

 private:

  long long m_error_code {0};

  std::string m_error_info;

  std::string m_file_name;

  int m_line {0};

};

}

#endif